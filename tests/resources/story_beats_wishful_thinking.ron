[
    Beat(
        // the actors, whose aliases will get matched at runtime with entities that satisfy the constraints.
        // How to differentiate these dynamic aliases with entities created for this beat? ie. the letter.
        entities: {
            "messenger": "character",
            "noble woman": "character",
            "letter": "object",
        },
        
        // Indicates that the following aliases must not match an existing entity, but rather
        // bind to a new entity constructed for this beat.
        // TODO: these requirements must be handled gameside for the following instructions to work.
        // In this case, the game must create a new letter entity and give it to the messenger.
        // This would mean the game must be able to interpret relationships.
        new_entities: {
            "letter": { // creates a new entity with the following properties
                "name": "urgent letter",
                "object type": "letter",
                "content": "Dear {PROTAG.gender.title} {PROTAG.family name},"
            },
        },

        new_relationships: [
            ("messenger", "carries", "letter"),
        ],

        // Constraints on aliases which must be satisfied for this beat to play
        constraints: [
            OneOf("{TIME.time of day}", ["morning", "midday"]),
            RelSame("{noble woman}", "{PROTAG}", "in", "city"), // both are in the same city
            // RelAny("{PROTAG}", "in", "city"), // protag is in any city // redundant?
            HasFlag("{PROTAG}", "local renown"),
            Eq("{noble woman.wealth}", "rich"),
            Eq("{noble woman.gender}", "{FEMALE}"), // prop gender matches global entity FEMALE
            
            // Rel("{PROTAG}", "near", "{messenger}"), // necessary? messenger will seek out player.
            Rel("{messenger}", "works for", "{noble woman}"),
        ],
        
        // The graph of instructions
        // TODO: investigate using an inkle like structure instead of a graph.
        // The issue with an inkle-like format is storing it as a huge string, which hurts the readability of this file.
        // Instead, the below graph could be presented in inkle format to the user for editing.
        scenario: {
            // start node is always named "start"
            "start": (
                next: ["accept", "refuse"],
                constraints: [],
                instructions: [
                    ( // event tuple contains the event's label followed by it concrete properties
                        "say",
                        {
                            "who": "messenger",
                            "speech": "[bring message]",
                        }
                    ),
                ],
                lines: {
                    "bring message": [
                        (
                            [ // constraints on this line variant
                            ],
                            "Pardon, are you the one called {PROTAG.gender.gendered title short} {PROTAG.family name}? I bring an urgent message on the part of lady {noble woman.family name}."
                        ),
                    ],
                },
            ),

            "refuse": (
                next: ["end"],
                constraints: [],
                instructions: [
                    (
                        "say",
                        "PROTAG",
                        "I do not wish to involve myself with lady {noble woman.family name}. Good day."
                    ),
                    (
                        "offend",
                        "PROTAG",
                        "noble woman",
                        "petty",
                    ),
                ],
            ),

            "accept": (
                next: ["details"],
                constraints: [],
                instructions: [
                    (
                        "say",
                        "PROTAG",
                        "Sounds exciting! Well, out with it!"
                    ),
                ]
            ),

            "details": (
                next: ["end"],
                constraints: [],
                instructions: [
                    (
                        "give",
                        "messenger",
                        "PROTAG",
                        "letter",
                    )
                ]
            )
        }
    )
]
